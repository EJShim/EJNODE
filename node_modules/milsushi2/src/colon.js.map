{"version":3,"file":"colon.js","sourceRoot":"","sources":["colon.ts"],"names":[],"mappings":"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","sourcesContent":["// (c) 2016 Machine Intelligence Laboratory (The University of Tokyo), MIT License.\n// colon object\n// $M.colon(1,3,10) or $M.colon.fromstring('1:3:10');\n\nclass Colon {\n  // http://jp.mathworks.com/help/matlab/ref/colon.html\n  start: number;\n  stop: number;\n  step: number;\n  all: boolean;//means ':'\n  constructor(start?: number, stop_step?: number, stop?: number) {\n    this.start = start;\n    this.step = 1;\n    if (this.start == null) {\n      this.all = true;\n    } else {\n      if (stop != null) {\n        // start:step:stop\n        this.step = stop_step;\n        this.stop = stop;\n      } else {\n        // start:1:stop\n        this.stop = stop_step;\n      }\n    }\n  }\n\n  static fromstring(s: string): Colon {\n    var elements = s.replace('end', '-1').split(':');\n    var nums: number[] = [];\n    for (var i = 0; i < elements.length; i++) {\n      nums.push(eval(elements[i] || 'null'));\n    }\n\n    if (elements.length == 2) {\n      return new Colon(nums[0], nums[1]);\n    } else if (elements.length == 3) {\n      return new Colon(nums[0], nums[1], nums[2]);\n    } else {\n      throw new Error('Invalid format');\n    }\n  }\n\n  tojsa(size?: number): number[] {\n    var start = this.start;\n    var stop = this.stop;\n    var step = this.step;\n    if (this.all) {\n      start = 1;\n      stop = size;\n      step = 1;\n    }\n    if (start < 0) {\n      start += size + 1;\n    }\n    if (stop < 0) {\n      stop += size + 1;\n    }\n\n    var jsa: number[] = [];\n    if (step > 0) {\n      for (var i = start; i <= stop; i += step) {\n        jsa.push(i);\n      }\n    } else if (step < 0) {\n      for (var i = start; i >= stop; i += step) {\n        jsa.push(i);\n      }\n    }//step == 0 means length 0\n\n    return jsa;\n  }\n\n  toString(): string {\n    if (this.start == null) {\n      return ':';\n    } else {\n      if (this.step == null) {\n        return colonedge2str(this.start) + ':' + colonedge2str(this.stop);\n      } else {\n        return colonedge2str(this.start) + ':' + this.step + ':' + colonedge2str(this.stop);\n      }\n    }\n  }\n}\n\nfunction colonedge2str(val: number): string {\n  if (val >= 0) {\n    return '' + val;\n  } else {\n    if (val == 0) {\n      return 'end';\n    }\n    return 'end-' + (-1 - val);\n  }\n}\n\nexport = Colon;\n"]}