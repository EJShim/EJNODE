import Matrix = require('../matrix');
import Colon = require('../colon');
import typedef = require('../typedef');
import $CL = require('./handwrittenjs/driver');
declare class MatrixCL extends Matrix {
    _clbuffer: $CL.clBuffer;
    static kernel_cache: {};
    constructor(size: number[], klass?: string);
    to_cpu(): Matrix;
    private throw_if_destructed();
    write(src_typed_array: any, dst_bytes_offset?: number): void;
    read(dst_typed_array: any, src_bytes_offset?: number): void;
    static _fromnativemat(A: Matrix): MatrixCL;
    static _fromtypedarray(src_typed_array: typedef.AllowedTypedArray, klass: string): MatrixCL;
    destruct(): void;
    inspect(depth: number): string;
    _getdata(): typedef.AllowedTypedArray;
    getdataref(src_offset?: number, length?: number): typedef.AllowedTypedArray;
    getdatacopy(src_offset?: number, length?: number, dst?: typedef.AllowedTypedArray): typedef.AllowedTypedArray;
    setdata(src: typedef.AllowedTypedArray, dst_offset?: number): void;
    static get_cast_str(dst_klass: string, src_klass: string): string;
    copy(klass?: string): Matrix;
    _fill(val: number): void;
    get(): number;
    get(...args: number[]): number;
    get(...args: any[]): Matrix;
    get_scalar(inds: number[]): number;
    private static _get_ind_iterator_cl(ind, dim_size);
    get_matrix_nd(inds: (number | Colon | Matrix)[]): Matrix;
    set(ind: number | Matrix | Colon, val: number | Matrix | any[]): void;
    set(row: number | Matrix | Colon, col: number | Matrix | Colon, val: number | Matrix | any[]): void;
    set(...args: any[]): void;
    set_scalar(val: number | Matrix, inds: number[]): void;
    static cast_scalar_val(val: number, klass: string): number;
    set_matrix_single(val: number | Matrix, singleind: Colon | Matrix): void;
    set_matrix_nd(val: number | Matrix, inds: (number | Colon | Matrix)[]): void;
    _find(): MatrixCL;
}
export = MatrixCL;
