{"version":3,"file":"matrix.js","sourceRoot":"","sources":["matrix.ts"],"names":[],"mappings":"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","sourcesContent":["// (c) 2016 Machine Intelligence Laboratory (The University of Tokyo), MIT License.\nimport Colon = require('./colon');\nimport typedef = require('./typedef');\n\ntype AllowedTypedArray = typedef.AllowedTypedArray;//TODO: find way to use AllowedTypedArray in public methods\n\nclass Matrix {\n  _size: number[];\n  _ndims: number;\n  _numel: number;\n  _klass: string;\n  _data_ctor: any;\n  _data: typedef.AllowedTypedArray;//allocated in constructor\n  _strides: number[];// in typedarray index (not byte)\n  static _autodestruct_stack: Matrix[][] = [];\n  static _autodestruct_stack_top: Matrix[] = null;\n\n  constructor(size: number[], klass: string = 'single', noalloc: boolean = false) {\n    var _size: number[] = Array.prototype.slice.call(size);//copy\n    //verify size\n    var tmpnumel: number = 1;\n    var strides: number[] = [];\n    var last_none_one_dim = 0;\n    if (_size.length < 2) {\n      throw new Error('matrix must have at least 2 dimensions');\n    }\n    for (var i = 0; i < _size.length; i++) {\n      var dimsize = _size[i];\n      if (typeof (dimsize) !== 'number' || dimsize < 0 || !Matrix._isinteger(dimsize)) {\n        throw new Error('size is invalid');\n      }\n      if (dimsize != 1) {\n        last_none_one_dim = i;\n      }\n      strides.push(tmpnumel);\n      tmpnumel *= dimsize;\n    }\n    if (tmpnumel >= 2147483648) {\n      // indexing with int32 value is impossible\n      throw new Error('Matrix of equal to or more than 2G elements is not supported');\n    }\n    this._numel = tmpnumel;\n    //remove tail dimensions with size 1 (retain minimum 2 dimensions)\n    last_none_one_dim = Math.max(last_none_one_dim, 1) + 1;\n    _size.splice(last_none_one_dim);\n    strides.splice(last_none_one_dim);\n    this._size = _size;\n    this._ndims = _size.length;\n    this._strides = strides;\n\n    if (!Matrix._isvalidklass(klass)) {\n      throw new Error('unknown klass');\n    }\n    this._klass = klass;\n    this._data_ctor = Matrix.data_ctors[klass];\n    if (!noalloc) {\n      this._alloccpu();\n    }\n\n    if (Matrix._autodestruct_stack_top) {\n      Matrix._autodestruct_stack_top.push(this);\n    }\n  }\n\n  static data_ctors = { 'single': Float32Array, 'int32': Int32Array, 'uint8': Uint8Array, 'logical': Uint8Array };\n\n  static autodestruct_push(): void {\n    var array = [];\n    Matrix._autodestruct_stack_top = array;\n    Matrix._autodestruct_stack.push(array);\n  }\n\n  static autodestruct_pop(): void {\n    if (Matrix._autodestruct_stack_top) {\n      //destruct all in current list\n      //console.log('Autodestruct: ' + Matrix._autodestruct_stack_top.length + ' mats');\n      for (var i = 0; i < Matrix._autodestruct_stack_top.length; i++) {\n        Matrix._autodestruct_stack_top[i].destruct();\n      }\n\n      Matrix._autodestruct_stack.pop();\n      Matrix._autodestruct_stack_top = Matrix._autodestruct_stack[Matrix._autodestruct_stack.length - 1];\n    }\n  }\n\n  destruct() {\n    //release memory\n    this._data = null;\n  }\n\n  inspect(depth: number): string {\n    var shape_str = this._size.join('x');\n    if (this._numel <= 100) {\n      return 'Matrix ' + shape_str + ' ' + this._klass + '\\n' + this.toString();\n    } else {\n      return 'Matrix ' + shape_str + ' ' + this._klass;\n    }\n  }\n\n  static typedarray2mat(size: number[], klass: string = 'single', data: typedef.AllowedTypedArray): Matrix {\n    //type check\n    if (!(data instanceof Matrix.data_ctors[klass])) {\n      throw Error('klass and data type mismatch');\n    }\n\n    var m = new Matrix(size, klass, true);\n    if (data.length < m._numel) {\n      throw Error('The length of data is smaller than matrix size');\n    }\n\n    m._data = data;\n    if (klass === 'logical') {\n      //force values to 0/1\n      for (var i = 0; i < m._numel; i++) {\n        data[i] = Number(data[i] != 0);\n      }\n    }\n    return m;\n  }\n\n  static _isinteger(x) {\n    return Math.round(x) == x;\n  }\n\n  static _isvalidklass(klass) {\n    return klass == 'single' || klass == 'int32' || klass == 'uint8' || klass == 'logical';\n  }\n\n  static _logical_cast_required(klass_dst: string, klass_src?: string): boolean {\n    return (klass_dst == 'logical' && klass_src != 'logical');\n  }\n\n  static _logical_cast(val: any): number {\n    return Number(Boolean(val));\n  }\n\n  private _alloccpu(): typedef.AllowedTypedArray {\n    // allocate cpu buffer if not exist\n    if (!this._data) {\n      this._data = new this._data_ctor(this._numel);\n    }\n\n    return this._data;\n  }\n\n  to_cpu(): Matrix {\n    return this;\n  }\n\n  _getdata(): typedef.AllowedTypedArray {\n    //override in gpu\n    //get copy of data in TypedArray\n    return this._data;\n  }\n\n  getdataref(src_offset: number = 0, length?: number): typedef.AllowedTypedArray {\n    //get read-only view of array\n    if (!src_offset && length == null) {\n      return this._data;\n    } else {\n      if (length == null) {\n        length = this._numel;\n      }\n      return new this._data_ctor(this._data.buffer, src_offset * this._data.BYTES_PER_ELEMENT, length);\n    }\n  }\n\n  getdatacopy(src_offset: number = 0, length?: number, dst?: typedef.AllowedTypedArray): typedef.AllowedTypedArray {\n    if (length == null) {\n      length = this._numel - src_offset;\n    }\n    if (!dst) {\n      dst = new this._data_ctor(length);\n    }\n\n    var range_view = new this._data_ctor(this._data.buffer, src_offset * this._data.BYTES_PER_ELEMENT, length);\n    dst.set(range_view);\n    return dst;\n  }\n\n  setdata(src: typedef.AllowedTypedArray, dst_offset: number = 0): void {\n    //set raw data into buffer\n    this._data.set(src, dst_offset);\n  }\n\n  _isvalidindex(inds: number[]): boolean {\n    if (this._numel == 0) {\n      // if matrix have zero dimension, all index is invalid\n      return false;\n    }\n    if (inds.length == 0) {\n      return false;\n    } else if (inds.length == 1) {\n      return Matrix._isinteger(inds[0]) && ((inds[0] > 0 && inds[0] <= this._numel) || (inds[0] < 0 && (-inds[0]) <= this._numel));\n    } else {\n      if (inds.length < this._ndims) {\n        // last index last index is regarded as linear index of remaining dimensions\n        for (var dim = 0; dim < inds.length; dim++) {\n          var ind = inds[dim];\n          var dimsize: number;\n          if (dim == inds.length - 1) {\n            //last index\n            dimsize = 1;\n            for (var dimex = dim; dimex < this._ndims; dimex++) {\n              dimsize *= this._size[dimex];\n            }\n          } else {\n            dimsize = this._size[dim];\n          }\n          if (Matrix._isinteger(ind) && ((ind > 0 && (ind <= dimsize) || (ind < 0 && -ind <= dimsize)))) {\n            //ok\n          } else {\n            return false;\n          }\n        }\n      } else {\n        for (var dim = 0; dim < inds.length; dim++) {\n          var ind = inds[dim];\n          var dimsize = this._size[dim] || 1;\n          // if dimensions of inds is more than matrix dimensions, only 1 is ok for the extra dimension\n          if (Matrix._isinteger(ind) && ((ind > 0 && (ind <= dimsize) || (ind < 0 && -ind <= dimsize)))) {\n            //ok\n          } else {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n\n  _isvalidindexerr(inds: number[]): void {\n    if (!this._isvalidindex(inds)) {\n      throw new Error('Invalid index');\n    }\n  }\n\n  _getarrayindex(inds: number[]): number {\n    // assume inds is valid\n    var idx = 0;\n    if (inds.length == 1) {\n      var ind = inds[0];\n      if (ind < 0) {\n        ind += this._numel + 1;\n      }\n      idx = ind - 1;\n    } else {\n      if (inds.length < this._ndims) {\n        // last index last index is regarded as linear index of remaining dimensions\n        for (var dim = 0; dim < inds.length; dim++) {\n          var ind = inds[dim];\n          if (ind < 0) {\n            var dimsize: number;\n            if (dim == inds.length - 1) {\n              //last index\n              dimsize = 1;\n              for (var dimex = dim; dimex < this._ndims; dimex++) {\n                dimsize *= this._size[dimex];\n              }\n            } else {\n              dimsize = this._size[dim];\n            }\n            ind += dimsize + 1;\n          }\n          idx += (ind - 1) * (this._strides[dim] || 0);//trailing 1 does not affect\n        }\n      } else {\n        for (var dim = 0; dim < inds.length; dim++) {\n          var ind = inds[dim];\n          if (ind < 0) {\n            ind += (this._size[dim] || 1) + 1;\n          }\n          idx += (ind - 1) * (this._strides[dim] || 0);//trailing 1 does not affect\n        }\n      }\n    }\n\n    return idx;\n  }\n\n  static numel(A: Matrix): number {\n    return A._numel;\n  }\n\n  static size(X: Matrix): Matrix;\n  static size(X: Matrix, dim: number): number;\n  static size(X: Matrix, dim?: number): any {\n    if (dim == undefined) {\n      return Matrix.jsa2mat([X._size]);\n    } else {\n      return X._size[dim - 1];\n    }\n  }\n\n  static sizejsa(X: Matrix): number[] {\n    return X._size;\n  }\n\n  static jsa2mat(ary: any, one_d_column: boolean = false, klass: string = 'single'): Matrix {\n    // TODO: type inference (contains non-integer => single, contains boolean => logical)\n    // get dimension\n    var mat: Matrix;\n    if (typeof (ary) === 'number') {\n      //1x1 matrix\n      mat = new Matrix([1, 1], klass);\n      mat.set_scalar(<number>ary, [1]);\n    } else if (ary instanceof Matrix) {\n      //simply copy\n      mat = (<Matrix>ary).copy();\n    } else if (!ary.length) {\n      //0x0 matrix (length is undefined or 0)\n      mat = new Matrix([0, 0], klass);\n    } else {\n      //n-d matrix\n      //get shape\n      var size: number[] = [];\n      var cur_ary: any[] = ary;\n      var numel = 1;\n      while (cur_ary.length !== void 0) {\n        size.push(cur_ary.length);\n        numel *= cur_ary.length;\n        cur_ary = cur_ary[0];\n      }\n      var ndims = size.length;\n      var cstride = [];\n      var fstride = [];\n      var last_cstride = 1;\n      var last_fstride = 1;\n      for (var dim = 0; dim < size.length; dim++) {\n        cstride.unshift(last_cstride);\n        fstride.push(last_fstride);\n        last_cstride *= size[size.length - 1 - dim];\n        last_fstride *= size[dim];\n      }\n\n      //flatten data\n      var data_ctor = Matrix.data_ctors[klass];\n      var data: AllowedTypedArray = new data_ctor(numel);\n      var flat_i = 0;\n\n      var n = function (a, dim, fidx_ofs) {\n        if (a.length != size[dim]) {\n          throw Error('Inconsistent size of n-d array');\n        }\n        if (dim == ndims - 1) {\n          // a contains numbers\n          for (var i = 0; i < size[dim]; i++) {\n            var val = a[i];\n            var fidx = fidx_ofs + Math.floor(flat_i / cstride[dim]) % size[dim] * fstride[dim];\n            data[fidx] = val;\n            flat_i++;\n          }\n\n        } else {\n          for (var i = 0; i < size[dim]; i++) {\n            n(a[i], dim + 1, fidx_ofs + Math.floor(flat_i / cstride[dim]) % size[dim] * fstride[dim]);\n          }\n        }\n      }\n\n      n(ary, 0, 0);\n      if (ndims == 1) {\n        if (one_d_column) {\n          size = [size[0], 1];\n        } else {\n          size = [1, size[0]];\n        }\n      }\n\n      mat = Matrix.typedarray2mat(size, klass, data);\n    }\n\n    return mat;\n  }\n\n  mat2jsa(one_d_flatten: boolean = false): any[] {\n    //empty matrix will be [] not [[]]\n    var ary = [];\n    if (one_d_flatten && this._ndims == 2 && (this._size[0] == 1 || this._size[1] == 1)) {\n      var data = this.getdataref();\n      for (var i = 0; i < data.length; i++) {\n        ary.push(data[i]);\n      }\n    } else {\n      //n-d jagged array\n      var size = this._size;\n      var ndims = this._ndims;\n      var data = this.getdataref();\n\n      var cstride = [];\n      var fstride = [];\n      var last_cstride = 1;\n      var last_fstride = 1;\n      for (var dim = 0; dim < ndims; dim++) {\n        cstride.unshift(last_cstride);\n        fstride.push(last_fstride);\n        last_cstride *= size[ndims - 1 - dim];\n        last_fstride *= size[dim];\n      }\n\n      var flat_i = 0;//c-order\n      var n = function (a, dim, fidx_ofs) {\n        if (dim == ndims - 1) {\n          for (var i = 0; i < size[dim]; i++) {\n            var fidx = fidx_ofs + Math.floor(flat_i / cstride[dim]) % size[dim] * fstride[dim];\n            a.push(data[fidx]);\n            flat_i++;\n          }\n        } else {\n          for (var i = 0; i < size[dim]; i++) {\n            var newa = [];\n            a.push(newa);\n            n(newa, dim + 1, fidx_ofs + Math.floor(flat_i / cstride[dim]) % size[dim] * fstride[dim]);\n          }\n        }\n      }\n\n      n(ary, 0, 0);\n    }\n    return ary;\n  }\n\n  get(): number;\n  get(...args: number[]): number;\n  get(...args: any[]): Matrix;\n  get(...args: any[]): any {\n    if (this._numel == 0) {\n      throw Error('Matrix with no element');\n    }\n    if (args.length == 0) {\n      // get scalar\n      return this._alloccpu()[0];\n    }\n    var all_number = args.every((v) => typeof (v) === 'number');\n    if (all_number) {\n      return this.get_scalar(args);\n    } else {\n      return this.get_matrix_nd(args);\n\n      // if (args.length > 1) {\n      //   return this.get_matrix_nd(args);\n      // } else {\n      //   if (args[0] instanceof Matrix && (<Matrix>args[0])._klass === 'logical') {\n      //     return this.get_matrix_logical(args[0]);\n      //   } else {\n      //     return this.get_matrix_single(args[0]);\n      //   }\n      // }\n    }\n  }\n\n  // returns value of (1,1) or 0\n  valueOf(): number {\n    if (this._numel > 0) {\n      return this.get();\n    } else {\n      return 0;\n    }\n  }\n\n  copy(klass?: string): Matrix {\n    var clone = new Matrix(this._size, klass || this._klass);\n    var clone_data = clone._getdata();\n    var rawdata = this._alloccpu();\n    if (Matrix._logical_cast_required(clone._klass, this._klass)) {\n      for (var i = 0, length = clone_data.length; i < length; i++) {\n        clone_data[i] = Matrix._logical_cast(rawdata[i]);\n      }\n    } else {\n      clone_data.set(rawdata);\n    }\n\n    return clone;\n  }\n\n  get_scalar(inds: number[]): number {\n    var rawdata = this._alloccpu();\n    this._isvalidindexerr(inds);\n    var arrayidx = this._getarrayindex(inds);\n    return rawdata[arrayidx];\n  }\n\n  private static _get_ind_iterator(ind: (number | Colon | Matrix), dim_size: number): { iter: (index: number) => number, length: number } {\n    // argument index is 0-origin\n    // return index within valid range\n    if (typeof (ind) === 'number') {\n      var ind_positive = <number>ind;\n      if (ind_positive < 0) {//end-xxx\n        ind_positive += dim_size + 1;\n      }\n      if (ind_positive <= 0 || ind_positive > dim_size) {\n        throw Error('Index exceeds matrix dimension');\n      }\n      return {\n        iter: function (index) {\n          return ind_positive;\n        }, length: 1\n      };\n    } else if (ind instanceof Colon) {\n      var start = ind.start;\n      var stop = ind.stop;\n      var step = ind.step;\n      if (ind.all) {\n        start = 1;\n        stop = dim_size;\n        step = 1;\n      }\n      if (start < 0) {\n        start += dim_size + 1;\n      }\n      if (stop < 0) {\n        stop += dim_size + 1;\n      }\n      var length: number = 0;\n      if ((step > 0 && stop >= start) || (step < 0 && stop <= start)) {\n        length = Math.floor((stop - start) / step) + 1;\n        // check if in valid range\n        var final_value = start + step * (length - 1);\n        if ((start <= 0 || start > dim_size) || (final_value <= 0 || final_value > dim_size)) {\n          throw Error('Index exceeds matrix dimension');\n        }\n      }\n      return {\n        iter: function (index) {\n          return start + step * index;\n        },\n        length: length\n      }\n    } else if (ind instanceof Matrix) {\n      var dataref = ind.getdataref();\n      // check if in valid range\n      for (var i = 0; i < dataref.length; i++) {\n        var element = dataref[i];\n        if (element == 0 || element > dim_size || element < -dim_size) {\n          throw Error('Index exceeds matrix dimension');\n        }\n      }\n\n      return {\n        iter: function (index) {\n          var val = dataref[index];\n          if (val < 0) {\n            val += dim_size;\n          }\n          return val;\n        },\n        length: dataref.length\n      }\n    }\n  }\n\n  get_matrix_nd(inds: (number | Colon | Matrix)[]): Matrix {\n    var inds_ndim = inds.length;\n    // replace logical matrix with vector\n    for (var i = 0; i < inds_ndim; i++) {\n      var ind = inds[i];\n      if (ind instanceof Matrix) {\n        if (ind._klass == 'logical') {\n          inds[i] = ind._find();\n        }\n      }\n    }\n\n    var virtual_input_shape: number[] = [];\n    if (this._ndims <= inds_ndim) {\n      // pad with 1\n      virtual_input_shape = this._size.concat();\n      while (virtual_input_shape.length < inds_ndim) {\n        virtual_input_shape.push(1);\n      }\n    } else {\n      // last dimension is like linear index\n      let cur_prod = 1;\n      for (let dim = 0; dim < inds_ndim - 1; dim++) {\n        virtual_input_shape.push(this._size[dim]);\n        cur_prod *= this._size[dim];\n      }\n      virtual_input_shape.push(this._numel / cur_prod);\n    }\n    var virtual_input_stride: number[] = [];\n    var stride_tmp = 1;\n    for (var dim = 0; dim < inds_ndim; dim++) {\n      virtual_input_stride.push(stride_tmp);\n      stride_tmp *= virtual_input_shape[dim];\n    }\n\n    var ind_iters = [];\n    var dst_shape = [];\n    var dst_stride = [];//not use dst._strides because tailing 1 dimension is omitted\n    var dst_stride_tmp = 1;\n    for (var dim = 0; dim < inds_ndim; dim++) {\n      var iter_and_length = Matrix._get_ind_iterator(inds[dim], virtual_input_shape[dim]);\n      ind_iters.push(iter_and_length.iter);\n      dst_shape.push(iter_and_length.length);\n      dst_stride.push(dst_stride_tmp);\n      dst_stride_tmp *= iter_and_length.length;\n    }\n\n    var dst_reshape_shape = null;\n    if (inds_ndim == 1) {\n      // linear indexing case\n      dst_shape.push(1);//avoid error on new Matrix()\n      // if ind is logical matrix, regarded as vector in the following\n      // colon is row vector\n      // src and ind are both vectors => follows direction of src\n      // otherwise: follows ind's shape\n      var is_ind_vector = false;\n      var only_ind = inds[0];\n      if (only_ind instanceof Matrix) {\n        if (only_ind._ndims == 2 && (only_ind._size[0] == 1 || only_ind._size[1] == 1)) {\n          is_ind_vector = true;\n        }\n      } else if (only_ind instanceof Colon) {\n        is_ind_vector = true;\n      }\n      var is_src_vector = false;\n      if (this._ndims == 2 && (this._size[0] == 1 || this._size[1] == 1)) {\n        is_src_vector = true;\n      }\n\n      if (is_src_vector && is_ind_vector) {\n        // follow direction of src\n        if (this._size[0] == 1) {\n          // reshape to row vector\n          dst_reshape_shape = [1, dst_shape[0]];\n        }\n      } else {\n        // follow ind's shape\n        if (only_ind instanceof Matrix) {\n          dst_reshape_shape = only_ind._size;\n        } else if (only_ind instanceof Colon) {\n          // reshape to row vector\n          dst_reshape_shape = [1, dst_shape[0]];\n        }\n      }\n    }\n    var dst = new Matrix(dst_shape, this._klass);\n    var dst_data = dst._data;\n    var src_data = this._data;\n    var dst_numel = dst._numel;\n    for (var dst_idx = 0; dst_idx < dst_numel; dst_idx++) {\n      var input_linear_idx = 0;\n      for (var dim = 0; dim < inds_ndim; dim++) {\n        var dst_coord = Math.floor(dst_idx / dst_stride[dim]) % dst_shape[dim];\n        var src_coord = ind_iters[dim](dst_coord) - 1;\n        input_linear_idx += src_coord * virtual_input_stride[dim];\n      }\n      dst_data[dst_idx] = src_data[input_linear_idx];\n    }\n\n    if (dst_reshape_shape) {\n      dst.reshape_inplace(dst_reshape_shape);\n    }\n\n    return dst;\n  }\n\n  get_matrix_nd_old(inds: (number | Colon | Matrix)[]): Matrix {\n    //multidim indexing\n    //convert index of each dimension into array\n    var eachdimidx: (number[] | AllowedTypedArray)[] = [];\n    var eachdimstride: number[] = [];\n    var output_size: number[] = [];\n    var output_length = 1;\n    var inputdimctr: number[] = [];\n    for (var dim = 0; dim < inds.length; dim++) {\n      var dimind = inds[dim];\n      var dimidx;\n      if (dimind instanceof Colon) {\n        dimidx = dimind.tojsa(this._size[dim] === void 0 ? 1 : this._size[dim]);\n      } else if (dimind instanceof Matrix) {\n        dimidx = dimind._getdata();\n      } else {\n        //number\n        dimidx = [<number>dimind];\n      }\n\n      //range check\n      var dimsize: number;\n      if (dim == inds.length - 1) {\n        // last index is regarded as linear index of remaining dimensions\n        dimsize = 1;\n        for (var dimex = dim; dimex < this._ndims; dimex++) {\n          dimsize *= this._size[dimex];\n        }\n      } else {\n        dimsize = this._size[dim] || 1;//exceed dimension must be [1,1,...]\n      }\n      for (var i = 0; i < dimidx.length; i++) {\n        var dimval = dimidx[i];\n        if (dimval < 0) {//$M.end-foo\n          dimval += dimsize + 1;\n          dimidx[i] = dimval;\n        }\n        if ((dimval > dimsize) || (dimval < 1)) {\n          throw new Error('Index exceeds matrix dimension');\n        }\n      }\n\n      eachdimidx.push(dimidx);\n      eachdimstride.push(this._strides[dim] || 0);\n      output_size.push(dimidx.length);\n      output_length *= dimidx.length;\n      inputdimctr.push(0);\n    }\n\n    var output = new Matrix(output_size, this._klass);\n    var output_data = output._data;\n    var input_data = this._data;\n    for (var i = 0; i < output_length; i++) {\n      //calc input index\n      var input_raw_idx = 0;\n      for (var dim = 0; dim < eachdimidx.length; dim++) {\n        input_raw_idx += (eachdimidx[dim][inputdimctr[dim]] - 1) * eachdimstride[dim];\n      }\n\n      output_data[i] = input_data[input_raw_idx];\n\n      //increment input index\n      for (var dim = 0; dim < inputdimctr.length; dim++) {\n        var element = ++inputdimctr[dim];\n        if (element >= eachdimidx[dim].length) {\n          //overflow to next dimension\n          inputdimctr[dim] = 0;\n        } else {\n          break;\n        }\n      }\n    }\n\n    return output;\n  }\n\n  get_matrix_single(singleind: Colon | Matrix): Matrix {\n    var single_idx_array: number[] | AllowedTypedArray;\n    var output_size: number[];\n    if (singleind instanceof Colon) {\n      single_idx_array = singleind.tojsa(this._numel);\n      output_size = [1, single_idx_array.length];//row vector\n    } else if (singleind instanceof Matrix) {\n      // returns matrix of same shape\n      // value in matrix is used as linear index\n      single_idx_array = singleind._data;\n      output_size = singleind._size;\n    }\n\n    var output = new Matrix(output_size, this._klass);\n    var output_data = output._data;\n    var input_data = this._data;\n    for (var i = 0, length = single_idx_array.length; i < length; i++) {\n      output_data[i] = input_data[single_idx_array[i] - 1];\n    }\n\n    return output;\n  }\n\n  get_matrix_logical(map: Matrix): Matrix {\n    // equivalent to this.get(find(map))\n    var output_length = 0;\n    var map_data = map._getdata();\n    var max_i = -1;\n    for (var i = 0, length = map_data.length; i < length; i++) {\n      if (map_data[i]) {\n        output_length++;\n        max_i = i;\n      }\n    }\n\n    if (this._numel <= max_i) {\n      throw new Error('Index out of bounds');\n    }\n\n    var output = new Matrix([output_length, 1], this._klass);\n    var output_data = output._data;\n    var input_data = this._data;\n    var ptr = 0;\n    for (var i = 0, length = map_data.length; i < length; i++) {\n      if (map_data[i]) {\n        output_data[ptr++] = input_data[i];\n      }\n    }\n\n    return output;\n  }\n\n  set(ind: number | Matrix | Colon, val: number | Matrix | any[]): void;\n  set(row: number | Matrix | Colon, col: number | Matrix | Colon, val: number | Matrix | any[]): void;\n  set(...args: any[]): void;\n  set(...args: any[]): void {\n    //last argument is value, but subsequent function requires first argument to be value\n    var val = args.pop();\n    if (!(val instanceof Matrix) && val.length !== void 0) {\n      // js array (or array-like)\n      val = Matrix.jsa2mat(val, false, this._klass);\n    }\n    // scalar matrix converted to number\n    if (val instanceof Matrix && val._numel == 1) {\n      val = (<Matrix>val).get_scalar([1]);\n    }\n\n    var all_number = args.every((v) => typeof (v) === 'number');\n    if (all_number) {\n      this.set_scalar(val, args);\n    } else {\n      this.set_matrix_nd(val, args);\n      // if (args.length > 1) {\n      //   this.set_matrix_nd(val, args);\n      // } else {\n      //   if (args[0] instanceof Matrix && (<Matrix>args[0])._klass === 'logical') {\n      //     this.set_matrix_logical(val, args[0]);\n      //   } else {\n      //     this.set_matrix_single(val, args[0]);\n      //   }\n      // }\n    }\n  }\n\n  set_scalar(val: number | Matrix, inds: number[]): void {\n    var rawdata = this._alloccpu();\n    this._isvalidindexerr(inds);\n    var arrayidx = this._getarrayindex(inds);\n    var scalar_val: number;\n    if (val instanceof Matrix) {\n      if (val._numel != 1) {\n        throw new Error('Value is not scalar');\n      }\n      scalar_val = val._getdata()[0];\n    } else {\n      scalar_val = <number>val;\n    }\n\n    if (Matrix._logical_cast_required(this._klass)) {\n      scalar_val = Matrix._logical_cast(scalar_val);\n    }\n    rawdata[arrayidx] = scalar_val;\n  }\n\n  set_matrix_single(val: number | Matrix, singleind: Colon | Matrix): void {\n    var single_idx_array: number[] | AllowedTypedArray;\n    var output_size: number[];\n    if (singleind instanceof Colon) {\n      single_idx_array = singleind.tojsa(this._numel);\n    } else if (singleind instanceof Matrix) {\n      // value in matrix is used as linear index\n      // used as flattened value array, regardless of shape\n      single_idx_array = singleind.getdataref();\n    }\n\n    var rawdata = this._alloccpu();\n\n    if (val instanceof Matrix) {\n      if (single_idx_array.length != val._numel) {\n        throw new Error('Dimension mismatch');\n      }\n      var val_data = val._getdata();\n      // read over flattened val\n      if (Matrix._logical_cast_required(this._klass, val._klass)) {\n        rawdata[single_idx_array[i] - 1] = Matrix._logical_cast(val_data[i]);\n      } else {\n        for (var i = 0, length = single_idx_array.length; i < length; i++) {\n          rawdata[single_idx_array[i] - 1] = val_data[i];\n        }\n      }\n    } else {\n      var scalar_val;\n      if (Matrix._logical_cast_required(this._klass)) {\n        scalar_val = Matrix._logical_cast(<number>val);\n      } else {\n        scalar_val = <number>val;\n      }\n      for (var i = 0, length = single_idx_array.length; i < length; i++) {\n        rawdata[single_idx_array[i] - 1] = scalar_val;\n      }\n    }\n  }\n\n\n  set_matrix_nd(val: number | Matrix, inds: (number | Colon | Matrix)[]): void {\n    var inds_ndim = inds.length;\n    // replace logical matrix with vector\n    for (var i = 0; i < inds_ndim; i++) {\n      var ind = inds[i];\n      if (ind instanceof Matrix) {\n        if (ind._klass == 'logical') {\n          inds[i] = ind._find();\n        }\n      }\n    }\n\n    var virtual_input_shape: number[] = [];\n    if (this._ndims <= inds_ndim) {\n      // pad with 1\n      virtual_input_shape = this._size.concat();\n      while (virtual_input_shape.length < inds_ndim) {\n        virtual_input_shape.push(1);\n      }\n    } else {\n      // last dimension is like linear index\n      let cur_prod = 1;\n      for (let dim = 0; dim < inds_ndim - 1; dim++) {\n        virtual_input_shape.push(this._size[dim]);\n        cur_prod *= this._size[dim];\n      }\n      virtual_input_shape.push(this._numel / cur_prod);\n    }\n    var virtual_input_stride: number[] = [];\n    var stride_tmp = 1;\n    for (var dim = 0; dim < inds_ndim; dim++) {\n      virtual_input_stride.push(stride_tmp);\n      stride_tmp *= virtual_input_shape[dim];\n    }\n\n    var ind_iters = [];\n    var dst_shape: number[] = [];\n    var dst_stride = [];//not use dst._strides because tailing 1 dimension is omitted\n    var dst_stride_tmp = 1;\n    for (var dim = 0; dim < inds_ndim; dim++) {\n      var iter_and_length = Matrix._get_ind_iterator(inds[dim], virtual_input_shape[dim]);\n      ind_iters.push(iter_and_length.iter);\n      dst_shape.push(iter_and_length.length);\n      dst_stride.push(dst_stride_tmp);\n      dst_stride_tmp *= iter_and_length.length;\n    }\n    var dst_numel = dst_stride_tmp;\n\n    var scalar_val: number = null;\n    if (typeof (val) === 'number') {\n      scalar_val = <number>val;\n    } else if (val instanceof Matrix) {\n      if (val._numel === 1) {\n        scalar_val = val.valueOf();\n      }\n    }\n\n    if (scalar_val == null) {\n      // set matrix\n      // shape check; dimensions excluding value 1 must match\n      var dst_shape_exclude_one = dst_shape.filter((v) => v != 1);\n      var val_shape_exclude_one = (<Matrix>val)._size.filter((v) => v != 1);\n      if (dst_shape_exclude_one.length != val_shape_exclude_one.length) {\n        throw Error('Shape mismatch');\n      }\n      if (!dst_shape_exclude_one.every((v, i) => v == val_shape_exclude_one[i])) {\n        throw Error('Shape mismatch');\n      }\n\n      var dst_data = (<Matrix>val).getdataref();\n      var src_data = this._data;\n      for (var dst_idx = 0; dst_idx < dst_numel; dst_idx++) {\n        var input_linear_idx = 0;\n        for (var dim = 0; dim < inds_ndim; dim++) {\n          var dst_coord = Math.floor(dst_idx / dst_stride[dim]) % dst_shape[dim];\n          var src_coord = ind_iters[dim](dst_coord) - 1;\n          input_linear_idx += src_coord * virtual_input_stride[dim];\n        }\n        src_data[input_linear_idx] = dst_data[dst_idx];\n      }\n\n    } else {\n      // set scalar\n      var src_data = this._data;\n      for (var dst_idx = 0; dst_idx < dst_numel; dst_idx++) {\n        var input_linear_idx = 0;\n        for (var dim = 0; dim < inds_ndim; dim++) {\n          var dst_coord = Math.floor(dst_idx / dst_stride[dim]) % dst_shape[dim];\n          var src_coord = ind_iters[dim](dst_coord) - 1;\n          input_linear_idx += src_coord * virtual_input_stride[dim];\n        }\n        src_data[input_linear_idx] = scalar_val;\n      }\n    }\n\n  }\n\n  set_matrix_nd_old(val: number | Matrix, inds: (number | Colon | Matrix)[]): void {\n    //multidim indexing\n    //convert index of each dimension into array\n    var eachdimidx: (number[] | AllowedTypedArray)[] = [];\n    var eachdimstride: number[] = [];\n    var output_size: number[] = [];\n    var output_length = 1;\n    var inputdimctr: number[] = [];\n    for (var dim = 0; dim < inds.length; dim++) {\n      var dimind = inds[dim];\n      var dimidx;\n      if (dimind instanceof Colon) {\n        dimidx = dimind.tojsa(this._size[dim] || 1);\n      } else if (dimind instanceof Matrix) {\n        dimidx = dimind._getdata();\n      } else {\n        //number\n        dimidx = [<number>dimind];\n      }\n\n      //range check\n      var dim_size = this._size[dim] || 1;//exceed dimension must be [1,1,...]\n      for (var i = 0; i < dimidx.length; i++) {\n        if ((dimidx[i] > dim_size) || (dimidx[i] < 1)) {\n          throw new Error('Index exceeds matrix dimension');\n        }\n      }\n\n      eachdimidx.push(dimidx);\n      eachdimstride.push(this._strides[dim] || 0);\n      output_size.push(dimidx.length);\n      output_length *= dimidx.length;\n      inputdimctr.push(0);\n    }\n\n\n    var rawdata = this._alloccpu();\n    if (val instanceof Matrix) {\n      //val shape check\n      var is_vector = output_size.filter((v) => v != 1).length <= 1;\n      if (is_vector) {\n        // if shape is vector, only numel have to match\n        if (val._numel != output_length) {\n          throw new Error('Dimensions mismatch');\n        }\n      } else {\n        // shape must match (exclude tailing 1)\n        for (var dim = 0; dim < Math.max(val._size.length, output_size.length); dim++) {\n          if ((val._size[dim] || 1) != (output_size[dim] || 1)) {\n            throw new Error('Dimensions mismatch');\n          }\n        }\n      }\n\n      var val_data = val._getdata();\n      if (Matrix._logical_cast_required(this._klass, val._klass)) {\n        for (var i = 0; i < output_length; i++) {\n          //calc input index\n          var input_raw_idx = 0;\n          for (var dim = 0; dim < eachdimidx.length; dim++) {\n            input_raw_idx += (eachdimidx[dim][inputdimctr[dim]] - 1) * eachdimstride[dim];\n          }\n\n          rawdata[input_raw_idx] = Matrix._logical_cast(val_data[i]);\n\n          //increment input index\n          for (var dim = 0; dim < inputdimctr.length; dim++) {\n            var element = ++inputdimctr[dim];\n            if (element >= eachdimidx[dim].length) {\n              //overflow to next dimension\n              inputdimctr[dim] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n\n      } else {\n        for (var i = 0; i < output_length; i++) {\n          //calc input index\n          var input_raw_idx = 0;\n          for (var dim = 0; dim < eachdimidx.length; dim++) {\n            input_raw_idx += (eachdimidx[dim][inputdimctr[dim]] - 1) * eachdimstride[dim];\n          }\n\n          rawdata[input_raw_idx] = val_data[i];\n\n          //increment input index\n          for (var dim = 0; dim < inputdimctr.length; dim++) {\n            var element = ++inputdimctr[dim];\n            if (element >= eachdimidx[dim].length) {\n              //overflow to next dimension\n              inputdimctr[dim] = 0;\n            } else {\n              break;\n            }\n          }\n        }\n\n      }\n\n    } else {\n      //val is scalar\n      var scalar_val;\n      if (Matrix._logical_cast_required(this._klass)) {\n        scalar_val = Matrix._logical_cast(<number>val);\n      } else {\n        scalar_val = <number>val;\n      }\n\n      for (var i = 0; i < output_length; i++) {\n        //calc input index\n        var input_raw_idx = 0;\n        for (var dim = 0; dim < eachdimidx.length; dim++) {\n          input_raw_idx += (eachdimidx[dim][inputdimctr[dim]] - 1) * eachdimstride[dim];\n        }\n\n        rawdata[input_raw_idx] = scalar_val;\n\n        //increment input index\n        for (var dim = 0; dim < inputdimctr.length; dim++) {\n          var element = ++inputdimctr[dim];\n          if (element >= eachdimidx[dim].length) {\n            //overflow to next dimension\n            inputdimctr[dim] = 0;\n          } else {\n            break;\n          }\n        }\n      }\n\n    }\n\n  }\n\n  set_matrix_logical(val: number | Matrix, map: Matrix): void {\n    // equivalent to this.set(val, find(map))\n    var output_length = 0;\n    var map_data = map._getdata();\n    var max_i = -1;\n    for (var i = 0, length = map_data.length; i < length; i++) {\n      if (map_data[i]) {\n        output_length++;\n        max_i = i;\n      }\n    }\n\n    if (this._numel < max_i) {\n      throw new Error('Index out of bounds');\n    }\n\n    var rawdata = this._alloccpu();\n    if (val instanceof Matrix) {\n      var val_data = val._getdata();\n      var ptr = 0;\n      if (Matrix._logical_cast_required(this._klass, val._klass)) {\n        for (var i = 0, length = map_data.length; i < length; i++) {\n          if (map_data[i]) {\n            rawdata[i] = Matrix._logical_cast(val_data[ptr++]);\n          }\n        }\n\n      } else {\n        for (var i = 0, length = map_data.length; i < length; i++) {\n          if (map_data[i]) {\n            rawdata[i] = val_data[ptr++];\n          }\n        }\n      }\n    } else {\n      var ptr = 0;\n      var scalar_val;\n      if (Matrix._logical_cast_required(this._klass)) {\n        scalar_val = Matrix._logical_cast(val);\n      } else {\n        scalar_val = <number>val;\n      }\n      for (var i = 0, length = map_data.length; i < length; i++) {\n        if (map_data[i]) {\n          rawdata[i] = scalar_val;\n        }\n      }\n    }\n\n  }\n\n  toString(): string {\n    var s = '';\n    var rows = this._size[0], cols = this._size[1];\n    var rawdata = this.getdataref();\n    for (var row = 0; row < rows; row++) {\n      for (var col = 0; col < cols; col++) {\n        s += rawdata[col * rows + row] + '\\t';\n      }\n      s += '\\n';\n    }\n    return s;\n  }\n\n  disp(X?: any): void {\n    var s = '';\n    if (this !== void 0) {\n      s = this.toString();\n    } else {\n      s = X.toString();\n    }\n    console.log(s);\n  }\n\n  reshape_inplace(sz: Matrix);\n  reshape_inplace(sz: number[]);\n  reshape_inplace(...sz: number[]);\n  reshape_inplace(...args: any[]): void {\n    var _size: number[];\n    var first_arg = args[0];\n    //convert to Array\n    if (first_arg instanceof Matrix) {\n      var tarray = first_arg._getdata();\n      _size = Array.prototype.slice.call(tarray);\n    } else if (first_arg.length !== void 0) {\n      _size = Array.prototype.slice.call(first_arg);\n    } else {\n      _size = Array.prototype.slice.call(args);\n    }\n\n    //type check\n    var tmpnumel: number = 1;\n    var strides: number[] = [];\n    var last_none_one_dim = 0;\n    if (_size.length < 2) {\n      throw new Error('matrix must have at least 2 dimensions');\n    }\n    //substitute -1 to remaining value\n    var minus_pos = -1;\n    var remaining_prod = 1;\n    for (var i = 0; i < _size.length; i++) {\n      if (_size[i] < 0) {\n        if (minus_pos >= 0) {\n          throw new Error('Only one free size is accepted');\n        }\n        minus_pos = i;\n      } else {\n        remaining_prod *= _size[i];\n      }\n    }\n    if (minus_pos >= 0) {\n      _size[minus_pos] = this._numel / remaining_prod;\n    }\n\n    for (var i = 0; i < _size.length; i++) {\n      var dimsize = _size[i];\n      if (typeof (dimsize) !== 'number' || dimsize < 0 || !Matrix._isinteger(dimsize)) {\n        throw new Error('size is invalid');\n      }\n      if (dimsize != 1) {\n        last_none_one_dim = i;\n      }\n      strides.push(tmpnumel);\n      tmpnumel *= dimsize;\n    }\n\n    if (tmpnumel !== this._numel) {\n      throw new Error('New shape must have same elements');\n    }\n\n    //remove tail dimensions with size 1 (retain minimum 2 dimensions)\n    last_none_one_dim = Math.max(last_none_one_dim, 1) + 1;\n    _size.splice(last_none_one_dim);\n    strides.splice(last_none_one_dim);\n\n    this._size = _size;\n    this._numel = tmpnumel;\n    this._ndims = _size.length;\n    this._strides = strides;\n  }\n\n  squeeze_inplace(): void {\n    if (this._ndims == 2) {\n      // keep [1,5] remained\n      return;\n    }\n    var new_size = this._size.filter((v) => v !== 1);\n    //append 1 to tail\n    while (new_size.length < 2) {\n      new_size.push(1);\n    }\n    var tmpnumel = 1;\n    var strides: number[] = [];\n    for (var dim = 0; dim < new_size.length; dim++) {\n      var dimsize = new_size[dim];\n      strides.push(tmpnumel);\n      tmpnumel *= dimsize;\n    }\n\n    this._size = new_size;\n    this._ndims = new_size.length;\n    this._strides = strides;\n  }\n\n  _find(): Matrix {\n    // returns nonzero-element indices\n    // if this is vector, direction (row/col) is kept.\n    // otherwise, column vector is returned.\n    var output_length = 0;\n    var src_data = this.getdataref();\n    for (var i = 0; i < src_data.length; i++) {\n      if (src_data[i]) {\n        output_length++;\n      }\n    }\n\n    var dst = new Matrix([output_length, 1], 'int32');\n    var dst_idx = 0;\n    var dst_data = dst._data;\n    for (var i = 0; dst_idx < output_length; i++) {\n      if (src_data[i]) {\n        dst_data[dst_idx++] = i + 1;\n      }\n    }\n    if (this._size[1] == this._numel) {\n      // row vector\n      dst.reshape_inplace(this._size);\n    }\n\n    return dst;\n  }\n}\n\nexport = Matrix;\n"]}