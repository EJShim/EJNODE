import Colon = require('./colon');
import typedef = require('./typedef');
declare class Matrix {
    _size: number[];
    _ndims: number;
    _numel: number;
    _klass: string;
    _data_ctor: any;
    _data: typedef.AllowedTypedArray;
    _strides: number[];
    static _autodestruct_stack: Matrix[][];
    static _autodestruct_stack_top: Matrix[];
    constructor(size: number[], klass?: string, noalloc?: boolean);
    static data_ctors: {
        'single': Float32ArrayConstructor;
        'int32': Int32ArrayConstructor;
        'uint8': Uint8ArrayConstructor;
        'logical': Uint8ArrayConstructor;
    };
    static autodestruct_push(): void;
    static autodestruct_pop(): void;
    destruct(): void;
    inspect(depth: number): string;
    static typedarray2mat(size: number[], klass: string, data: typedef.AllowedTypedArray): Matrix;
    static _isinteger(x: any): boolean;
    static _isvalidklass(klass: any): boolean;
    static _logical_cast_required(klass_dst: string, klass_src?: string): boolean;
    static _logical_cast(val: any): number;
    private _alloccpu();
    to_cpu(): Matrix;
    _getdata(): typedef.AllowedTypedArray;
    getdataref(src_offset?: number, length?: number): typedef.AllowedTypedArray;
    getdatacopy(src_offset?: number, length?: number, dst?: typedef.AllowedTypedArray): typedef.AllowedTypedArray;
    setdata(src: typedef.AllowedTypedArray, dst_offset?: number): void;
    _isvalidindex(inds: number[]): boolean;
    _isvalidindexerr(inds: number[]): void;
    _getarrayindex(inds: number[]): number;
    static numel(A: Matrix): number;
    static size(X: Matrix): Matrix;
    static size(X: Matrix, dim: number): number;
    static sizejsa(X: Matrix): number[];
    static jsa2mat(ary: any, one_d_column?: boolean, klass?: string): Matrix;
    mat2jsa(one_d_flatten?: boolean): any[];
    get(): number;
    get(...args: number[]): number;
    get(...args: any[]): Matrix;
    valueOf(): number;
    copy(klass?: string): Matrix;
    get_scalar(inds: number[]): number;
    private static _get_ind_iterator(ind, dim_size);
    get_matrix_nd(inds: (number | Colon | Matrix)[]): Matrix;
    get_matrix_nd_old(inds: (number | Colon | Matrix)[]): Matrix;
    get_matrix_single(singleind: Colon | Matrix): Matrix;
    get_matrix_logical(map: Matrix): Matrix;
    set(ind: number | Matrix | Colon, val: number | Matrix | any[]): void;
    set(row: number | Matrix | Colon, col: number | Matrix | Colon, val: number | Matrix | any[]): void;
    set(...args: any[]): void;
    set_scalar(val: number | Matrix, inds: number[]): void;
    set_matrix_single(val: number | Matrix, singleind: Colon | Matrix): void;
    set_matrix_nd(val: number | Matrix, inds: (number | Colon | Matrix)[]): void;
    set_matrix_nd_old(val: number | Matrix, inds: (number | Colon | Matrix)[]): void;
    set_matrix_logical(val: number | Matrix, map: Matrix): void;
    toString(): string;
    disp(X?: any): void;
    reshape_inplace(sz: Matrix): any;
    reshape_inplace(sz: number[]): any;
    reshape_inplace(...sz: number[]): any;
    squeeze_inplace(): void;
    _find(): Matrix;
}
export = Matrix;
