"use strict";
// (c) 2016 Machine Intelligence Laboratory (The University of Tokyo), MIT License.
var Matrix = require('./matrix');
/**
 * Convert array-like to Matrix, number to 1x1 Matrix
 */
function as_mat(A) {
    if (A instanceof Matrix) {
        return A;
    }
    else {
        //array to matrix
        //number to 1x1 matrix
        return Matrix.jsa2mat(A);
    }
}
exports.as_mat = as_mat;
/**
 * Convert array-like to Matrix, preserving other type
 */
function as_mat_or_scalar(A) {
    if (A instanceof Matrix) {
        return A;
    }
    else if (typeof (A) === 'object' && A.length != null) {
        //array-like to Matrix
        return Matrix.jsa2mat(A);
    }
    else {
        return A; //preserve number
    }
}
exports.as_mat_or_scalar = as_mat_or_scalar;
//finds common output class for matrices
function commonklassstr() {
    var klasses = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        klasses[_i - 0] = arguments[_i];
    }
    // single > int32 > uint8 > logical
    var klass_order = ['single', 'int32', 'uint8', 'logical'];
    if (klasses.length == 0) {
        return klass_order[0];
    }
    var best_klass = 3;
    for (var i = 0; i < klasses.length; i++) {
        var element = klasses[i];
        var score = klass_order.indexOf(element);
        if (score < 0) {
            throw new Error('Unknown klass');
        }
        best_klass = Math.min(score, best_klass);
    }
    return klass_order[best_klass];
}
exports.commonklassstr = commonklassstr;
function commonklass() {
    var mats = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        mats[_i - 0] = arguments[_i];
    }
    //number not affects class decision
    var klasses = [];
    for (var i = 0; i < mats.length; i++) {
        var element = mats[i];
        if (element instanceof Matrix) {
            klasses.push(element._klass);
        }
    }
    return commonklassstr.apply(void 0, klasses);
}
exports.commonklass = commonklass;
function issamesize(sizea, sizeb) {
    for (var i = 0; i < sizea.length; i++) {
        if (sizea[i] != sizeb[i]) {
            return false;
        }
    }
    return true;
}
exports.issamesize = issamesize;
function force_cpu(A) {
    if (A instanceof Matrix) {
        return A.to_cpu();
    }
    else {
        return A;
    }
}
exports.force_cpu = force_cpu;
function force_cpu_scalar(A) {
    if (A instanceof Matrix) {
        if (A._numel == 1) {
            return A.get();
        }
        else {
            return A.to_cpu();
        }
    }
    else {
        return A;
    }
}
exports.force_cpu_scalar = force_cpu_scalar;
function jsaequal(a, b) {
    if (a.length != b.length) {
        return false;
    }
    for (var i = 0; i < a.length; i++) {
        if (a[i] != b[i]) {
            return false;
        }
    }
    return true;
}
exports.jsaequal = jsaequal;
function calc_zeros_size(args) {
    var size;
    var klass = 'single';
    if (args.length >= 1 && typeof (args[args.length - 1]) === 'string') {
        //zeros(_,typename)
        klass = args[args.length - 1];
        args.pop();
    }
    else if (args.length >= 2 && args[args.length - 2] == 'like') {
        //zeros('like', mat)
        klass = args[args.length - 1]._klass;
        args.pop();
        args.pop();
    }
    if (args.length == 0) {
        // return 1x1 matrix
        size = [1, 1];
    }
    else {
        if (args.length == 1) {
            if (typeof (args[0]) === 'number') {
                // nxn matrix
                size = [args[0], args[0]];
            }
            else if (args[0] instanceof Matrix) {
                // size given as matrix
                var sizemat = args[0];
                if (sizemat._size.length == 2 && sizemat._size[0] == 1 && sizemat._size[1] >= 1) {
                    size = Array.prototype.slice.call(sizemat._getdata());
                }
                else {
                    throw new Error('matrix size is not valid row vector');
                }
            }
            else {
                throw new Error('Unknown data type of argument 0');
            }
        }
        else {
            size = args;
        }
    }
    return { size: size, klass: klass };
}
exports.calc_zeros_size = calc_zeros_size;
//# sourceMappingURL=util.js.map