export import Matrix = require('./matrix');
export import Colon = require('./colon');
export import colon = require('./colonwrap');
import util = require('./util');
import shape_converter = require('./shape_converter');
import reduction = require('./reduction');
import mul = require('./mul');
import npy = require('./io/npy');
export declare var CL: any;
export declare var end: number;
export declare type MatrixOrNumber = util.MatrixOrNumber;
export declare type MatrixLike = Matrix | number | number[] | number[][];
export declare function initcl(): boolean;
export declare function devicetype(A: Matrix): string;
export declare function autodestruct(f: () => any): any;
export declare var typedarray2mat: typeof Matrix.typedarray2mat;
export declare function zeros(...args: any[]): Matrix;
export declare function ones(...args: any[]): Matrix;
export declare function rand(...args: any[]): Matrix;
export declare function randi(imax: number | number[], ...args: any[]): Matrix;
export declare function randn(...args: any[]): Matrix;
export declare function eye(...args: any[]): Matrix;
export declare function size(X: Matrix): Matrix;
export declare function size(X: Matrix, dim: number): number;
export declare function sizejsa(X: Matrix): number[];
export declare function jsa2mat(A: any[], one_d_column?: boolean, klass?: string): Matrix;
export declare function mat2jsa(A: Matrix, one_d_flatten?: boolean): any[];
export declare function length(X: Matrix): number;
export declare function ndims(X: Matrix): number;
export declare function numel(X: Matrix): number;
export declare function iscolumn(A: Matrix): boolean;
export declare function isrow(A: Matrix): boolean;
export declare function isvector(A: Matrix): boolean;
export declare function isempty(A: Matrix): boolean;
export declare function ismatrix(A: Matrix): boolean;
export declare function isscalar(A: Matrix): boolean;
export declare function klass(object: Matrix): string;
export declare function gpuArray(A: MatrixLike): Matrix;
export declare function gather(A: Matrix): Matrix;
/**
 * Compares elements of two matrices. One of the input can be scalar number.
 *
 * @param A Input matrix.
 * @param B Input matrix.
 * @return logical matrix. 1 if A(i) == B(i).
 */
export declare var eq: (A: number | Matrix, B: number | Matrix) => Matrix;
/**
 * Compares elements of two matrices. One of the input can be scalar number.
 *
 * @param A Input matrix.
 * @param B Input matrix.
 * @return logical matrix. 1 if A(i) >= B(i).
 */
export declare var ge: (A: number | Matrix, B: number | Matrix) => Matrix;
/**
 * Compares elements of two matrices. One of the input can be scalar number.
 *
 * @param A Input matrix.
 * @param B Input matrix.
 * @return logical matrix. 1 if A(i) > B(i).
 */
export declare var gt: (A: number | Matrix, B: number | Matrix) => Matrix;
/**
 * Compares elements of two matrices. One of the input can be scalar number.
 *
 * @param A Input matrix.
 * @param B Input matrix.
 * @return logical matrix. 1 if A(i) <= B(i).
 */
export declare var le: (A: number | Matrix, B: number | Matrix) => Matrix;
/**
 * Compares elements of two matrices. One of the input can be scalar number.
 *
 * @param A Input matrix.
 * @param B Input matrix.
 * @return logical matrix. 1 if A(i) < B(i).
 */
export declare var lt: (A: number | Matrix, B: number | Matrix) => Matrix;
/**
 * Compares elements of two matrices. One of the input can be scalar number.
 *
 * @param A Input matrix.
 * @param B Input matrix.
 * @return logical matrix. 1 if A(i) != B(i).
 */
export declare var ne: (A: number | Matrix, B: number | Matrix) => Matrix;
/**
 * Checks if all matrices are equal. Assumes NaN is not equal to NaN.
 *
 * @param As Input matrices.
 * @return true if all matrices are the same regarding both size and value of elements.
 */
export declare var isequal: (...As: Matrix[]) => boolean;
/**
 * Checks if all matrices are equal. Assumes NaN is equal to NaN.
 *
 * @param As Input matrices.
 * @return true if all matrices are the same regarding both size and value of elements.
 */
export declare var isequaln: (...As: Matrix[]) => boolean;
/**
 * Compares if elements of two matrices are close. One of the input can be scalar number.
 *
 * @param A Input matrix.
 * @param B Input matrix.
 * @return logical matrix. 1 if abs(A(i) - B(i)) <= atol + rtol * abs(B(i)).
 */
export declare var isclose: (A: number | Matrix, B: number | Matrix, rtol?: number, atol?: number, equal_nan?: boolean) => Matrix;
/**
 * Compares if all the elements of two matrices are close. One of the input can be scalar number. See also [[isclose]]
 *
 * @param A Input matrix.
 * @param B Input matrix.
 * @return true if all elements of isclose(A, B) are 1.
 */
export declare var allclose: (A: number | Matrix, B: number | Matrix, rtol?: number, atol?: number, equal_nan?: boolean) => boolean;
export declare var plus: (A: number | Matrix, B: number | Matrix) => Matrix;
export declare var minus: (A: number | Matrix, B: number | Matrix) => Matrix;
export declare var times: (A: number | Matrix, B: number | Matrix) => Matrix;
export declare var rdivide: (A: number | Matrix, B: number | Matrix) => Matrix;
export declare var ldivide: (A: number | Matrix, B: number | Matrix) => Matrix;
export declare var power: (A: number | Matrix, B: number | Matrix) => Matrix;
export declare var floor: (A: number | Matrix) => Matrix;
export declare var fix: (A: number | Matrix) => Matrix;
export declare var ceil: (A: number | Matrix) => Matrix;
export declare var uplus: (A: number | Matrix) => Matrix;
export declare var uminus: (A: number | Matrix) => Matrix;
export declare var exp: (A: number | Matrix) => Matrix;
export declare var log: (A: number | Matrix) => Matrix;
export declare var max: typeof reduction.max;
export declare var min: typeof reduction.min;
export declare var argmax: typeof reduction.argmax;
export declare var argmin: typeof reduction.argmin;
export declare var sum: typeof reduction.sum;
export declare var mean: typeof reduction.mean;
export declare var prod: typeof reduction.prod;
export declare var std: typeof reduction.std;
export declare var variance: typeof reduction.variance;
export declare var mtimes: typeof mul.mtimes;
export declare function reshape(A: Matrix, ...sz: any[]): Matrix;
export declare function squeeze(A: Matrix): Matrix;
export declare var transpose: typeof shape_converter.transpose;
export declare var t: typeof shape_converter.transpose;
export declare var repmat: typeof shape_converter.repmat;
export declare var cat: typeof shape_converter.cat;
export declare var horzcat: typeof shape_converter.horzcat;
export declare var vertcat: typeof shape_converter.vertcat;
export declare var permute: typeof shape_converter.permute;
export declare var ipermute: typeof shape_converter.ipermute;
export declare var npyread: typeof npy.npyread;
export declare var npysave: typeof npy.npysave;
export declare function sub2ind(matrixSize: Matrix | number[], ...dimSub: number[]): number;
export declare function colonvec(start: number, stop_step: number, stop?: number, klass?: string): Matrix;
