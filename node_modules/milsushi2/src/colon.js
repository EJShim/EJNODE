// (c) 2016 Machine Intelligence Laboratory (The University of Tokyo), MIT License.
// colon object
// $M.colon(1,3,10) or $M.colon.fromstring('1:3:10');
"use strict";
var Colon = (function () {
    function Colon(start, stop_step, stop) {
        this.start = start;
        this.step = 1;
        if (this.start == null) {
            this.all = true;
        }
        else {
            if (stop != null) {
                // start:step:stop
                this.step = stop_step;
                this.stop = stop;
            }
            else {
                // start:1:stop
                this.stop = stop_step;
            }
        }
    }
    Colon.fromstring = function (s) {
        var elements = s.replace('end', '-1').split(':');
        var nums = [];
        for (var i = 0; i < elements.length; i++) {
            nums.push(eval(elements[i] || 'null'));
        }
        if (elements.length == 2) {
            return new Colon(nums[0], nums[1]);
        }
        else if (elements.length == 3) {
            return new Colon(nums[0], nums[1], nums[2]);
        }
        else {
            throw new Error('Invalid format');
        }
    };
    Colon.prototype.tojsa = function (size) {
        var start = this.start;
        var stop = this.stop;
        var step = this.step;
        if (this.all) {
            start = 1;
            stop = size;
            step = 1;
        }
        if (start < 0) {
            start += size + 1;
        }
        if (stop < 0) {
            stop += size + 1;
        }
        var jsa = [];
        if (step > 0) {
            for (var i = start; i <= stop; i += step) {
                jsa.push(i);
            }
        }
        else if (step < 0) {
            for (var i = start; i >= stop; i += step) {
                jsa.push(i);
            }
        } //step == 0 means length 0
        return jsa;
    };
    Colon.prototype.toString = function () {
        if (this.start == null) {
            return ':';
        }
        else {
            if (this.step == null) {
                return colonedge2str(this.start) + ':' + colonedge2str(this.stop);
            }
            else {
                return colonedge2str(this.start) + ':' + this.step + ':' + colonedge2str(this.stop);
            }
        }
    };
    return Colon;
}());
function colonedge2str(val) {
    if (val >= 0) {
        return '' + val;
    }
    else {
        if (val == 0) {
            return 'end';
        }
        return 'end-' + (-1 - val);
    }
}
module.exports = Colon;
//# sourceMappingURL=colon.js.map