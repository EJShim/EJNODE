{"version":3,"file":"shape_converter.js","sourceRoot":"","sources":["shape_converter.ts"],"names":[],"mappings":"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","sourcesContent":["// (c) 2016 Machine Intelligence Laboratory (The University of Tokyo), MIT License.\nimport Matrix = require('./matrix');\nimport util = require('./util');\nimport colon = require('./colonwrap');\n\nexport function transpose(A: Matrix): Matrix {\n  if (A._ndims != 2) {\n    throw new Error('Matrix must be two-dimensional');\n  }\n  A = A.to_cpu();\n\n  var [dst_cols, dst_rows] = A._size;\n  var dst = new Matrix([dst_rows, dst_cols], A._klass);\n\n  var a_data = A._data;\n  var dst_data = dst._data;\n  var i = 0;\n  for (var dst_col = 0; dst_col < dst_cols; dst_col++) {\n    for (var dst_row = 0; dst_row < dst_rows; dst_row++) {\n      dst_data[i] = a_data[dst_row * dst_cols + dst_col];\n      i++;\n    }\n\n  }\n\n  return dst;\n}\n\nexport function repmat(A: Matrix, ...rs: number[]): Matrix;\nexport function repmat(A: Matrix, rs: number[]): Matrix;\nexport function repmat(A: Matrix, r: Matrix): Matrix;\nexport function repmat(A: Matrix, ...args: any[]): Matrix {\n  A = A.to_cpu();\n  //convert to Array\n  var _rs: number[];//number of repetion for each dim\n  var first_arg = args[0];\n  if (first_arg instanceof Matrix) {\n    var tarray = first_arg._getdata();\n    _rs = Array.prototype.slice.call(tarray);\n  } else if (first_arg.length !== void 0) {\n    _rs = Array.prototype.slice.call(first_arg);\n  } else {\n    _rs = Array.prototype.slice.call(args);\n  }\n  if (_rs.length === 1) {\n    //[2] => [2,2]\n    _rs.push(_rs[0]);\n  }\n\n  while (_rs.length < A._ndims) {\n    _rs.push(1);\n  }\n\n  // remove tailing 1\n  while ((_rs.length > A._ndims) && (_rs[_rs.length - 1] == 1)) {\n    _rs.pop();\n  }\n\n  var newdims = _rs.length;\n  var newsize: number[] = [];\n  var input_strides: number[] = [];\n  var output_strides: number[] = [];\n  var tmp_in_stride = 1;\n  var tmp_out_stride = 1;\n  var n_copy = 1;\n  var rs_strides: number[] = [];\n  for (var dim = 0; dim < newdims; dim++) {\n    var indimsize = A._ndims > dim ? A._size[dim] : 1;\n    var outdimsize = indimsize * _rs[dim];\n    rs_strides.push(n_copy);\n    n_copy *= _rs[dim];\n    newsize.push(outdimsize);\n    input_strides.push(tmp_in_stride);\n    output_strides.push(tmp_out_stride);\n    tmp_in_stride *= indimsize;\n    tmp_out_stride *= outdimsize;\n  }\n  input_strides.push(tmp_in_stride);//dummy\n  rs_strides.push(n_copy);//dummy\n\n  var output_steps: number[] = [];\n  for (var i = 0; i < n_copy; i++) {\n    var out_offset = 0;\n    for (var dim = 0; dim < newdims; dim++) {\n      out_offset += Math.floor(i % rs_strides[dim + 1] / rs_strides[dim]) * output_strides[dim] * (A._size[dim] || 1);\n    }\n    output_steps.push(out_offset);\n  }\n\n  var dst = new Matrix(newsize, A._klass);\n  var a_data = A._data;\n  var dst_data = dst._data;\n  for (var i = 0, i_length = A._numel; i < i_length; i++) {\n    var a_i = a_data[i];\n    var out_offset = 0;\n    for (var dim = 0; dim < newdims; dim++) {\n      out_offset += Math.floor(i % input_strides[dim + 1] / input_strides[dim]) * output_strides[dim];\n    }\n    for (var j = 0; j < n_copy; j++) {\n      var out_idx = out_offset + output_steps[j];\n      dst_data[out_idx] = a_i;\n    }\n\n  }\n  return dst;\n}\n\nexport function cat(dim: number, ...As: Matrix[]): Matrix {\n  //dimension other than concatenating dimension must be same\n  var dst_size = As[0]._size.concat();\n  // if dim == 4, [2, 3] => [2, 3, 1, 1]\n  while (dst_size.length < dim) {\n    dst_size.push(1);\n  }\n  var concat_offsets = [1];\n  for (var i = 1; i < As.length; i++) {\n    var A = As[i];\n    if (A._numel == 0) {\n      concat_offsets.push(0);//not used\n      continue;\n    }\n    var a_size = A._size;\n    if (a_size.length > dst_size.length) {\n      throw Error('Dimension mismatch');\n    }\n    for (var d = 0; d < dst_size.length; d++) {\n      var a_dim = a_size[d] || 1;\n      if (d == dim - 1) {\n        // dimension to concat\n        concat_offsets.push(dst_size[d] + 1);\n        dst_size[d] += a_dim;\n      } else {\n        if (a_dim != dst_size[d]) {\n          throw Error('Dimension mismatch');\n        }\n      }\n\n    }\n  }\n\n  var dst = new Matrix(dst_size, As[0]._klass);\n  for (var i = 0; i < As.length; i++) {\n    var A = As[i];\n    if (A._numel == 0) {\n      continue;\n    }\n    var args: any[] = [];\n    for (var d = 0; d < dst_size.length; d++) {\n      var element = A._size[d] || 1;\n      if (d == dim - 1) {\n        args.push(colon(concat_offsets[i], concat_offsets[i] + element - 1));\n      } else {\n        args.push(colon());\n      }\n    }\n    args.push(A);\n\n    dst.set(...args);\n  }\n\n  return dst;\n}\n\nexport function horzcat(...As: Matrix[]): Matrix {\n  return cat(2, ...As);\n}\n\nexport function vertcat(...As: Matrix[]): Matrix {\n  return cat(1, ...As);\n}\n\nexport function permute(A: Matrix, order: number[]): Matrix {\n  var src_size = A._size.concat();\n  var numel = A._numel;\n  if (order.length < src_size.length) {\n    throw Error('order must include at least input dimension');\n  }\n  var ndim = order.length;\n  var src_strides = A._strides.concat();\n  while (src_size.length < ndim) {\n    //append dimension of 1\n    src_size.push(1);\n    src_strides.push(numel);\n  }\n  var dst_size: number[] = [];\n  for (var d = 0; d < ndim; d++) {\n    var element = order[d] - 1;//order start from 1\n    dst_size.push(src_size[element]);\n  }\n\n  var dst = new Matrix(dst_size, A._klass);\n  var dst_strides = dst._strides.concat();\n  while (dst_strides.length < ndim) {\n    // occur when last dimensions are 1\n    dst_strides.push(numel);\n  }\n  var dst_strides_perm = [];\n  order.forEach((o, i) => dst_strides_perm[o - 1] = dst_strides[i]);\n  var src_data = A.getdataref();\n  var dst_data = dst._data;\n  for (var i = 0; i < numel; i++) {\n    var dst_idx = 0;\n    for (var d = 0; d < ndim; d++) {\n      dst_idx += Math.floor(i / src_strides[d]) % src_size[d] * dst_strides_perm[d];\n    }\n    dst_data[dst_idx] = src_data[i];\n  }\n  return dst;\n}\n\nexport function ipermute(A: Matrix, order: number[]): Matrix {\n  // reverse order\n  var rev_order = order.concat();//have same elements\n  for (var d = 0; d < order.length; d++) {\n    rev_order[order[d] - 1] = d + 1;\n  }\n  return permute(A, rev_order);\n}\n"]}