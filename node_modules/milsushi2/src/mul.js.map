{"version":3,"file":"mul.js","sourceRoot":"","sources":["mul.ts"],"names":[],"mappings":";AAAA,mFAAmF;AACnF,IAAO,MAAM,WAAW,UAAU,CAAC,CAAC;AAGpC,gBAAuB,CAAS,EAAE,CAAS;IACzC,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;QACnC,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;IACpD,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;IACpC,CAAC;IAED,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,QAAQ,IAAI,CAAC,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC;QACjD,MAAM,IAAI,KAAK,CAAC,6BAA6B,CAAC,CAAC;IACjD,CAAC;IAED,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACnD,IAAI,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,GAAG,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACxB,IAAI,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;IACrB,IAAI,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC;IACrB,IAAI,GAAG,GAAG,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IACvC,IAAI,GAAG,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC1B,IAAI,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC;IAEvB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;YAC3B,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3B,GAAG,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;YACnD,CAAC;YACD,MAAM,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC;QAC5B,CAAC;IACH,CAAC;IAED,MAAM,CAAC,GAAG,CAAC;AACb,CAAC;AAjCe,cAAM,SAiCrB,CAAA","sourcesContent":["// (c) 2016 Machine Intelligence Laboratory (The University of Tokyo), MIT License.\nimport Matrix = require('./matrix');\nimport util = require('./util');\n\nexport function mtimes(A: Matrix, B: Matrix): Matrix {\n  if (A._ndims != 2 || B._ndims != 2) {\n    throw new Error('Matrix must be two-dimensional');\n  }\n\n  if (A._size[1] != B._size[0]) {\n    throw new Error('Shape mismatch');\n  }\n\n  if (A._klass != 'single' || B._klass != 'single') {\n    throw new Error('Matrix klass must be single');\n  }\n\n  var m = A._size[0], n = B._size[1], k = A._size[1];\n  var lda = A._strides[1];\n  var ldb = B._strides[1];\n  var data_a = A._data;\n  var data_b = B._data;\n  var dst = new Matrix([m, n], 'single');\n  var ldc = dst._strides[1];\n  var data_c = dst._data;\n\n  for (var i = 0; i < m; i++) {\n    for (var j = 0; j < n; j++) {\n      var sum = 0;\n      for (var r = 0; r < k; r++) {\n        sum += data_a[i + r * lda] * data_b[r + j * ldb];\n      }\n      data_c[i + j * ldc] = sum;\n    }\n  }\n\n  return dst;\n}\n"]}