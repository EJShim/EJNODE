"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var $M = require('../src/sushi');
var BenchBase = require('./bench_base');
var slice = (function (_super) {
    __extends(slice, _super);
    function slice(get_set, size, slicer) {
        _super.call(this);
        this.get_set = get_set;
        this.size = size;
        this.slicer = slicer;
        this.name = "slicer [" + size + "]." + get_set + "(" + slicer + ")";
        switch (get_set) {
            case 'get':
                this.run = this.run_get;
                break;
            case 'set':
                this.run = this.run_set;
                break;
            default:
                throw Error('get or set');
        }
    }
    slice.prototype.setup = function () {
        var a = $M.gpuArray($M.rand.apply($M, this.size));
        var b = null;
        if (this.get_set == 'set') {
            var sizecheck = a.get.apply(a, this.slicer);
            b = $M.gpuArray($M.rand($M.size(sizecheck)));
        }
        return [a, b];
    };
    slice.prototype.run = function (a, b) {
    };
    slice.prototype.run_set = function (a, b) {
        var args = this.slicer.concat(b);
        a.set.apply(a, args);
    };
    slice.prototype.run_get = function (a, b) {
        a.get.apply(a, this.slicer);
    };
    return slice;
}(BenchBase));
module.exports = slice;
//# sourceMappingURL=slice.js.map