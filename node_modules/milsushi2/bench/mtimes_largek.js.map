{"version":3,"file":"mtimes_largek.js","sourceRoot":"","sources":["mtimes_largek.ts"],"names":[],"mappings":"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","sourcesContent":["import $M = require('../src/sushi');\nimport BenchBase = require('./bench_base');\n\nclass mtimes_largek extends BenchBase {\n  constructor(public m: number, public n: number, public k: number) {\n    super();\n    this.name = \"mtimes_largek \" + m + \"*\" + n + \"*\" + k;\n  }\n\n  setup() {\n    var a = $M.gpuArray($M.rand(this.k, this.m));\n    var b = $M.gpuArray($M.rand(this.k, this.n));\n    var c_my = my_mtimes_largek_group(a, b);\n    var c_compare = mtimes_trans_cl(a, b, true, false);\n    console.log('correctenss: ', $M.allclose(c_my, c_compare, 1e-3));\n    c_my.destruct();\n    c_compare.destruct();\n    return [a, b];\n  }\n\n  run(a: $M.Matrix, b: $M.Matrix): void {\n    my_mtimes_largek_group(a, b);\n  }\n}\n\nexport = mtimes_largek;\n\nfunction mtimes_trans_cl(A: $M.Matrix, B: $M.Matrix, trans_a: boolean, trans_b: boolean) {\n  if (A._ndims != 2 || B._ndims != 2) {\n    throw new Error('Matrix must be two-dimensional');\n  }\n  if (A._klass != 'single' || B._klass != 'single') {\n    throw new Error('Matrix klass must be single');\n  }\n  var m: number, n: number, k: number;\n  var lda: number, ldb: number, ldc: number;\n  var trans_a_char = 'N', trans_b_char = 'N';\n  if (trans_a) {\n    m = A._size[1];\n    k = A._size[0];\n    trans_a_char = 'T';\n  } else {\n    m = A._size[0];\n    k = A._size[1];\n  }\n  var size_mismatch = false;\n  if (trans_b) {\n    n = B._size[0];\n    if (k != B._size[1]) {\n      size_mismatch = true;\n    }\n    trans_b_char = 'T';\n  } else {\n    n = B._size[1];\n    if (k != B._size[0]) {\n      size_mismatch = true;\n    }\n  }\n\n  var C = new $M.CL.MatrixCL([m, n], 'single');\n  lda = A._strides[1];\n  ldb = B._strides[1];\n  ldc = C._strides[1];\n  $M.CL.sgemm(trans_a_char, trans_b_char, m, n, k, 1.0, A, lda, B, ldb, 0.0, C, ldc);\n  return C;\n}\n\nvar my_mtimes_largek_naive_kernel = null;\nfunction my_mtimes_largek_naive(A: $M.Matrix, B: $M.Matrix) {\n  // A^T * B\n  var m: number, k: number, n: number;\n\n  k = A._size[0];\n  m = A._size[1];\n  n = B._size[1];\n  var C = new $M.CL.MatrixCL([m, n], 'single');\n\n  if (!my_mtimes_largek_naive_kernel) {\n    my_mtimes_largek_naive_kernel = $M.CL.createKernel([\n      '__kernel void kernel_func(__global float *C, __global const float *A, __global const float *B, uint m, uint n, uint k)',\n      '{',\n      'uint i = get_global_id(0);',\n      'uint j = get_global_id(1);',\n      'float sum = 0.0F;',\n      'for (uint s = 0; s < k; s++) {',\n      '  sum += A[s+k*i]*B[s+k*j];',\n      '}',\n      'C[i+m*j]=sum;',\n      '}'\n    ].join('\\n'));\n  }\n\n  var WebCL = $M.CL.WebCL;\n  $M.CL.executeKernel(my_mtimes_largek_naive_kernel, [\n    { access: WebCL.MEM_WRITE_ONLY, datum: C },\n    { access: WebCL.MEM_READ_ONLY, datum: A },\n    { access: WebCL.MEM_READ_ONLY, datum: B },\n    { datum: m, type: WebCL.type.UINT },\n    { datum: n, type: WebCL.type.UINT },\n    { datum: k, type: WebCL.type.UINT }\n  ], [m, n], [1, 1]);\n\n  return C;\n}\n\nvar my_mtimes_largek_group_kernel = null;\nfunction my_mtimes_largek_group(A: $M.Matrix, B: $M.Matrix) {\n  // A^T * B\n  var m: number, k: number, n: number;\n\n  k = A._size[0];\n  m = A._size[1];\n  n = B._size[1];\n  var C = new $M.CL.MatrixCL([m, n], 'single');\n\n  var group_size = 256;\n  if (!my_mtimes_largek_group_kernel) {\n    my_mtimes_largek_group_kernel = $M.CL.createKernel([\n      '#define GROUP_SIZE ' + group_size,\n      '__kernel void kernel_func(__global float *C, __global const float *A, __global const float *B, uint m, uint n, uint k)',\n      '{',\n      'uint i = get_group_id(0);',\n      'uint j = get_group_id(1);',\n      'uint l = get_local_id(0);',\n      '__local float local_sums[GROUP_SIZE];',\n      'float local_sum = 0.0F;',\n      'for (uint s = l; s < k; s+=GROUP_SIZE) {',\n      '  local_sum += A[s+k*i]*B[s+k*j];',\n      '}',\n      'local_sums[l] = local_sum;',\n      'barrier(CLK_LOCAL_MEM_FENCE);',\n      'if (l == 0) {',\n      'for (uint g = 1; g < GROUP_SIZE; g++) {',\n      '  local_sum += local_sums[g];',\n      '}',\n      'C[i+m*j]=local_sum;',\n      '}',\n      '}'\n    ].join('\\n'));\n  }\n\n  var WebCL = $M.CL.WebCL;\n  $M.CL.executeKernel(my_mtimes_largek_group_kernel, [\n    { access: WebCL.MEM_WRITE_ONLY, datum: C },\n    { access: WebCL.MEM_READ_ONLY, datum: A },\n    { access: WebCL.MEM_READ_ONLY, datum: B },\n    { datum: m, type: WebCL.type.UINT },\n    { datum: n, type: WebCL.type.UINT },\n    { datum: k, type: WebCL.type.UINT }\n  ], [m * group_size, n], [group_size, 1]);\n\n  return C;\n}\n"]}