{"version":3,"file":"slice.js","sourceRoot":"","sources":["slice.ts"],"names":[],"mappings":";;;;;;AAAA,IAAO,EAAE,WAAW,cAAc,CAAC,CAAC;AACpC,IAAO,SAAS,WAAW,cAAc,CAAC,CAAC;AAE3C;IAAoB,yBAAS;IAC3B,eAAmB,OAAe,EAAS,IAAc,EAAS,MAAa;QAC7E,iBAAO,CAAC;QADS,YAAO,GAAP,OAAO,CAAQ;QAAS,SAAI,GAAJ,IAAI,CAAU;QAAS,WAAM,GAAN,MAAM,CAAO;QAE7E,IAAI,CAAC,IAAI,GAAG,UAAU,GAAG,IAAI,GAAG,IAAI,GAAG,OAAO,GAAG,GAAG,GAAG,MAAM,GAAG,GAAG,CAAC;QACpE,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;YAChB,KAAK,KAAK;gBACR,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;gBACxB,KAAK,CAAC;YACR,KAAK,KAAK;gBACR,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC;gBACxB,KAAK,CAAC;YACR;gBACE,MAAM,KAAK,CAAC,YAAY,CAAC,CAAC;QAC9B,CAAC;IACH,CAAC;IAED,qBAAK,GAAL;QACE,IAAI,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,OAAP,EAAE,EAAS,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3C,IAAI,CAAC,GAAG,IAAI,CAAC;QACb,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC,CAAC;YAC1B,IAAI,SAAS,GAAG,CAAC,CAAC,GAAG,OAAL,CAAC,EAAQ,IAAI,CAAC,MAAM,CAAC,CAAC;YACtC,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QAC/C,CAAC;QACD,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAChB,CAAC;IAED,mBAAG,GAAH,UAAI,CAAY,EAAE,CAAY;IAE9B,CAAC;IAED,uBAAO,GAAP,UAAQ,CAAY,EAAE,CAAY;QAChC,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,GAAG,OAAL,CAAC,EAAQ,IAAI,CAAC,CAAC;IACjB,CAAC;IAED,uBAAO,GAAP,UAAQ,CAAY,EAAE,CAAY;QAChC,CAAC,CAAC,GAAG,OAAL,CAAC,EAAQ,IAAI,CAAC,MAAM,CAAC,CAAC;IACxB,CAAC;IACH,YAAC;AAAD,CAAC,AAtCD,CAAoB,SAAS,GAsC5B;AAED,iBAAS,KAAK,CAAC","sourcesContent":["import $M = require('../src/sushi');\nimport BenchBase = require('./bench_base');\n\nclass slice extends BenchBase {\n  constructor(public get_set: string, public size: number[], public slicer: any[]) {\n    super();\n    this.name = \"slicer [\" + size + \"].\" + get_set + \"(\" + slicer + \")\";\n    switch (get_set) {\n      case 'get':\n        this.run = this.run_get;\n        break;\n      case 'set':\n        this.run = this.run_set;\n        break;\n      default:\n        throw Error('get or set');\n    }\n  }\n\n  setup() {\n    var a = $M.gpuArray($M.rand(...this.size));\n    var b = null;\n    if (this.get_set == 'set') {\n      var sizecheck = a.get(...this.slicer);\n      b = $M.gpuArray($M.rand($M.size(sizecheck)));\n    }\n    return [a, b];\n  }\n\n  run(a: $M.Matrix, b: $M.Matrix): void {\n\n  }\n\n  run_set(a: $M.Matrix, b: $M.Matrix): void {\n    var args = this.slicer.concat(b);\n    a.set(...args);\n  }\n\n  run_get(a: $M.Matrix, b: $M.Matrix): void {\n    a.get(...this.slicer);\n  }\n}\n\nexport = slice;\n"]}