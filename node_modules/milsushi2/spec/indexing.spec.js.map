{"version":3,"file":"indexing.spec.js","sourceRoot":"","sources":["indexing.spec.ts"],"names":[],"mappings":";AAAA,IAAO,EAAE,WAAW,cAAc,CAAC,CAAC;AAKpC,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,EAAE,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC;AACvB,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAC3B,IAAI,aAAa,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC;AAC7C,IAAI,UAAU,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AACzD,OAAO,CAAC,GAAG,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC;AACpC,IAAI,QAAQ,GAAG,IAAI,CAAC;AACpB,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;IACf,EAAE,CAAC,MAAM,EAAE,CAAC;IACZ,QAAQ,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;AAC5C,CAAC;AAED,IAAI,UAAU,GAAG,EAAE,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC;AACzD,UAAU,CAAC,IAAI,EAAE,CAAC;AAElB,kBAAkB,OAAO,EAAE,QAAQ;IACjC,IAAI,IAAI,GAAG,OAAO,GAAG,GAAG,GAAG,QAAQ,GAAG,MAAM,CAAC;IAC7C,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1C,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;QACf,CAAC,GAAG,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IACD,MAAM,CAAC,CAAC,CAAC;AACX,CAAC;AAED,mBAAmB,SAAiB;IAClC,IAAI,CAAC,GAAG;QACN,EAAE,CAAC,YAAY,CAAC;YACd,IAAI,QAAQ,GAAG,wBAAwB,GAAG,SAAS,CAAC;YACpD,IAAI,WAAW,GAAG,EAAE,CAAC,YAAY,CAAC,QAAQ,GAAG,YAAY,EAAE,MAAM,CAAC,CAAC;YACnE,IAAI,CAAC,GAAG,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,GAAG,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAChC,IAAI,CAAC,GAAG,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;YAChC,IAAI,cAAc,GAAG,QAAQ,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;YAE1D,IAAI,CAAC,WAAW,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC,CAAA;IACD,MAAM,CAAC,CAAC,CAAC;AACX,CAAC;AAED,QAAQ,CAAC,UAAU,EAAE;IACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3C,IAAI,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;QAC9B,EAAE,CAAC,SAAS,EAAE,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;IACtC,CAAC;AACH,CAAC,CAAC,CAAC","sourcesContent":["import $M = require('../src/sushi');\n\ndeclare var require;\ndeclare var process;\ndeclare var Buffer;\nvar os = require('os');\nvar fs = require('fs');\nvar path = require('path');\nvar child_process = require('child_process');\nvar cl_enabled = Boolean(Number(process.env['TEST_CL']));\nconsole.log('OpenCL ' + cl_enabled);\nvar MatrixCL = null;\nif (cl_enabled) {\n  $M.initcl();\n  MatrixCL = require('../src/cl/matrix_cl');\n}\n\nvar case_names = fs.readdirSync('spec/fixture/indexing');\ncase_names.sort();\n\nfunction load_npy(basedir, basename): $M.Matrix {\n  var path = basedir + '/' + basename + '.npy';\n  var m = $M.npyread(fs.readFileSync(path));\n  if (cl_enabled) {\n    m = $M.gpuArray(m);\n  }\n  return m;\n}\n\nfunction make_test(test_name: string) {\n  var f = () => {\n    $M.autodestruct(() => {\n      var case_dir = 'spec/fixture/indexing/' + test_name;\n      var case_script = fs.readFileSync(case_dir + '/expect.js', 'utf8');\n      var x = load_npy(case_dir, 'x');\n      var y = load_npy(case_dir, 'y');\n      var z = load_npy(case_dir, 'z');\n      var indexing_error = load_npy(case_dir, 'indexing_error');\n\n      eval(case_script);\n    });\n  }\n  return f;\n}\n\ndescribe('indexing', () => {\n  for (var i = 0; i < case_names.length; i++) {\n    var test_name = case_names[i];\n    it(test_name, make_test(test_name));\n  }\n});\n"]}